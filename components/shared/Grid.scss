.container {
  max-width: px-to-rem(1480);
  margin: 0 auto;
  padding-right: px-to-rem(16);
  padding-left: px-to-rem(16);

  @include mq-up(sm) {
    padding-right: px-to-rem(32);
    padding-left: px-to-rem(32);
  }

  @include mq-up(rg) {
    padding-right: px-to-rem(48);
    padding-left: px-to-rem(48);
  }

  @include mq-up(md) {
    padding-right: px-to-rem(64);
    padding-left: px-to-rem(64);
  }

  @include mq-up(xl) {
    padding-right: px-to-rem(100);
    padding-left: px-to-rem(100);
  }

  &--wide {
    padding-right: 0 !important;
    padding-left: 0 !important;
  }
}

.row {
  display: flex;
  flex-wrap: wrap;

  @each $bp, $gutter in $grid-gutters {
    @include dynamic-media-query($bp) {
      margin-right: -$gutter / 2;
      margin-left: -$gutter / 2;
    }
  }

  &--horizontal-gutters {
    .col {
      @each $bp, $gutter in $grid-gutters {
        @include dynamic-media-query($bp) {
          padding-bottom: $gutter;
        }
      }
    }
  }
}

.col {
  display: block;
  position: relative;
  min-height: 1px;

  // Setting different gutters for different breakpoints
  @each $bp, $gutter in $grid-gutters {
    @include dynamic-media-query($bp) {
      padding-right: $gutter / 2;
      padding-left: $gutter / 2;
    }
  }
}

// Short mixing to creating classes for columns
@mixin create-cols($key, $grid-columns: $grid-columns) {
  @for $i from 0 through $grid-columns {
    @if $i != 0 {
      .#{$key}-#{$i} {
        flex: 0 0 (100% / $grid-columns * $i);
        width: (100% / $grid-columns * $i);
        max-width: (100% / $grid-columns * $i);
      }
    }

    .offset-#{$key}-#{$i} {
      margin-left: (100% / $grid-columns * $i);
    }

    // Only needed when floating the columns
    .offset-right-#{$key}-#{$i} {
      margin-right: (100% / $grid-columns * $i);
    }
  }
}

@each $bp, $width in $grid-breakpoints {
  @include dynamic-media-query($bp) {
    @include create-cols($bp);
  }
}
